---
import MegamenuSubMenu from "./MegamenuSubMenu.astro";
const { data } = Astro.props;

const ariaPopUpValue = data.submenu && data.submenu.length > 0 ? true : false;
---

<li
  class="listItem"
  data-menu-item-id=`${data.label}`
  role="none"
  aria-haspopup=`${ariaPopUpValue}`
  aria-expanded="false"
>
  <a
    href={data.url}
    class="listItem-anchor"
    role="menuitem"
    aria-label={data.label}
  >
    <div>
      <span>{data.label}</span>
      <button
        tabindex="0"
        class=`listItem-button ${data.submenu && data.submenu.length > 0 ? 'hasSubmenu': ''}`
        aria-label=`Expand sub-menu for ${data.label}`
      >
        V
      </button>
    </div>
  </a>
  {
    data.submenu && data.submenu.length > 0 && (
      <div class="sub-menu-container">
        <MegamenuSubMenu submenu={data.submenu} />
      </div>
    )
  }
</li>

<style>
  a {
    text-decoration: none;
    color: inherit;
  }

  a:hover {
    text-decoration: underline blueviolet;
  }

  .listItem {
    padding-left: 0.5rem;
    padding-right: 0.5rem;
    /* border:1px solid red; */
  }

  .listItem:first-of-type {
    padding-left: 0;
  }

  .listItem-anchor {
    display: flex;
  }

  .listItem-button {
    background-color: transparent;
    border: 0;
  }

  .sub-menu-container {
    display: none;
  }

  .listItem:hover .sub-menu-container {
    display: block;
  }

  .sub-menu-container-visible {
    display: block;
  }
</style>

<script>
  import { menuItemArrowLeft, menuItemArrowRight } from "../js/arrowEvents";
  function toggleSubmenu(buttonEle: HTMLButtonElement): boolean {
    const parent = buttonEle.closest(".listItem") as HTMLElement;
    const subMenuDiv = parent.querySelector(
      ".sub-menu-container"
    ) as HTMLDivElement;

    return subMenuDiv.classList.toggle("sub-menu-container-visible");
  }

  function toggleSubmenuAccessibility(
    ele: HTMLButtonElement | HTMLLIElement | null,
    toggleState: boolean
  ): void {
    const parent = ele?.closest(".listItem") as HTMLElement;
    parent &&
      parent.setAttribute("aria-expanded", toggleState ? "true" : "false");
  }

  function setOpenItemId(
    buttonEle: HTMLButtonElement,
    menuEle: HTMLUListElement
  ): void {
    const selectedMenuItem = buttonEle?.closest(".listItem") as HTMLElement;
    const selectedMenuItemId = selectedMenuItem.dataset.menuItemId;

    menuEle.dataset.openItemId = selectedMenuItemId;
  }

  function unsetOpenItemId(menuEle: HTMLUListElement): void {
    menuEle.dataset.openItemId = "";
  }

  function getOpenItemId(menuEle: HTMLUListElement): string {
    return menuEle?.dataset.openItemId || "";
  }

  function getListItem(ele: HTMLElement): HTMLLIElement | null {
    return ele.closest(".listItem");
  }

  function getMenuElement(buttonEle: HTMLButtonElement): HTMLUListElement {
    const menuEle = buttonEle.closest(
      ".megamenu-top-level"
    ) as HTMLUListElement;

    return menuEle;
  }

  function navigateToHref(buttonEle: HTMLButtonElement): void {
    const anchorEle = buttonEle.closest(
      ".listItem-anchor"
    ) as HTMLAnchorElement;

    location.assign(anchorEle.href);
  }

  function closeNonCurrentMenus(menuEle: HTMLUListElement): void {
    const currentlyOpenItemId = menuEle.dataset.openItemId;

    const openSubmenus = menuEle.querySelectorAll(
      ".sub-menu-container-visible"
    );

    openSubmenus.forEach((ele: Element) => {
      const listItem = getListItem(ele as HTMLUListElement);

      if (listItem?.dataset.menuItemId !== currentlyOpenItemId) {
        ele.classList.remove("sub-menu-container-visible");
        toggleSubmenuAccessibility(listItem, false);
      }
    });
  }

  function buttonClickEventHandler(
    buttonEle: HTMLButtonElement,
    menuEle: HTMLUListElement
  ): void {
    const currentlyOpenItemBefore = getOpenItemId(menuEle);
    console.log("currentlyOpenItemBefore", currentlyOpenItemBefore);

    if (buttonEle.classList.contains("hasSubmenu")) {
      const isSet = toggleSubmenu(buttonEle);
      isSet ? setOpenItemId(buttonEle, menuEle) : unsetOpenItemId(menuEle);
      toggleSubmenuAccessibility(buttonEle, isSet);
    } else {
      navigateToHref(buttonEle);
    }

    const currentlyOpenItemAfter = getOpenItemId(menuEle);
    console.log("currentlyOpenItemAfter", currentlyOpenItemAfter);

    // close menus that are not the current one here
    closeNonCurrentMenus(menuEle);
  }

  document.querySelectorAll(".listItem-button").forEach((b: Element) => {
    b.addEventListener("click", (e: Event) => {
      e.preventDefault();
      const buttonEle = e.target as HTMLButtonElement;
      const menuEle = getMenuElement(buttonEle);

      buttonClickEventHandler(buttonEle, menuEle);
    });
  });

  document
    .querySelectorAll(".megamenu-top-level .listItem")
    ?.forEach((ele: Element) => {
      ele.addEventListener("keydown", (e: Event) => {
        const kbdEvt = e as KeyboardEvent;

        console.log("kbdEvt .listItem", kbdEvt);

        switch (kbdEvt.key) {
          case " ":
            if (
              (e.target as HTMLElement)?.classList.contains("listItem-button")
            ) {
              e.preventDefault();
              const buttonEle = e.target as HTMLButtonElement;
              const menuEle = getMenuElement(buttonEle);
              buttonClickEventHandler(buttonEle, menuEle);
            }
            break;
          case "ArrowLeft":
            menuItemArrowLeft(ele);
            break;
          case "ArrowRight":
            menuItemArrowRight(ele);
            break;
          case "ArrowUp":
            console.group("ArrowUp");
            console.log("aria-expanded", ele.getAttribute("aria-expanded"));
            if (
              (e.target as HTMLElement)?.classList.contains(
                "listItem-button"
              ) &&
              ele.getAttribute("aria-expanded") == "true"
            ) {
              e.preventDefault();
              const buttonEle = e.target as HTMLButtonElement;
              const menuEle = getMenuElement(buttonEle);
              buttonClickEventHandler(buttonEle, menuEle);
            }
            console.groupEnd();
            break;
          case "ArrowDown":
            console.group("ArrowDown");
            console.log("e.target", e.target);
            if (
              (e.target as HTMLElement)?.classList.contains(
                "listItem-button"
              ) &&
              (e.target as HTMLElement)?.classList.contains("hasSubmenu") &&
              ele.getAttribute("aria-expanded") == "true"
            ) {
              e.preventDefault();
              const submenu = ele.querySelector(".subMenu");
              const firstMenuItem = submenu?.querySelector(
                "[role=menuitem"
              ) as HTMLElement;
              console.log("firstMenuItem", firstMenuItem);
              firstMenuItem.focus();
            }
            console.groupEnd();
            break;
        }
      });
    });
</script>
